// ExplicaAI - Servi√ßo de Auto-categoriza√ß√£o Inteligente
// Analisa problemas matem√°ticos e sugere categorias automaticamente

const { truncateText } = require('../utils/helpers');

class CategorizationService {
  constructor() {
    // Padr√µes para identifica√ß√£o de categorias
    this.patterns = {
      '√Ålgebra B√°sica': {
        keywords: ['x', 'y', 'equa√ß√£o', 'linear', 'sistema', 'vari√°vel', 'inc√≥gnita', 'resolver'],
        symbols: ['=', '+', '-', 'x', 'y', 'z'],
        regex: [
          /\d*x\s*[\+\-]\s*\d+\s*=\s*\d+/, // 2x + 5 = 13
          /\d*x\s*=\s*\d+/, // x = 5
          /x\s*[\+\-]\s*\d+\s*=\s*\d+/, // x + 3 = 7
          /sistema.*equa[√ßc][√µo]es?/i,
          /equa[√ßc][√£a]o.*linear/i
        ],
        confidence: 0.7
      },
      
      'Geometria': {
        keywords: ['√°rea', 'per√≠metro', 'volume', 'c√≠rculo', 'tri√¢ngulo', 'quadrado', 'ret√¢ngulo', 
                  'comprimento', 'largura', 'altura', 'raio', 'di√¢metro', 'lado', 'base',
                  'pit√°goras', 'teorema', '√¢ngulo', 'grau', 'cm', 'm', 'km', 'm¬≤', 'cm¬≤'],
        symbols: ['œÄ', '¬∞', '¬≤', '¬≥'],
        regex: [
          /√°rea.*=.*œÄ.*r/i,
          /volume.*=.*œÄ.*r.*h/i,
          /per√≠metro/i,
          /teorema.*pit√°goras/i,
          /\d+\s*(cm|m|km)¬≤?/i,
          /√¢ngulo.*\d+¬∞/i
        ],
        confidence: 0.9
      },
      
      'Fun√ß√µes': {
        keywords: ['fun√ß√£o', 'f(x)', 'g(x)', 'dom√≠nio', 'imagem', 'gr√°fico', 'sen', 'cos', 'tan',
                  'log', 'ln', 'exponencial', 'logaritmo', 'derivada', 'integral'],
        symbols: ['f(', 'g(', 'sen(', 'cos(', 'tan(', 'log(', 'ln(', '‚à´', '‚àë'],
        regex: [
          /f\(x\)\s*=/, // f(x) = 
          /g\(x\)\s*=/, // g(x) = 
          /(sen|cos|tan)\([^)]+\)/i,
          /log\([^)]+\)/i,
          /ln\([^)]+\)/i,
          /\^x/i, // exponencial
          /x\^\d+/i, // pot√™ncia
          /‚àö/
        ],
        confidence: 0.8
      },
      
      'Prepara√ß√£o ENEM': {
        keywords: ['enem', 'vestibular', 'concurso', 'porcentagem', '%', 'juros', 'desconto',
                  'regra de tr√™s', 'propor√ß√£o', 'raz√£o', 'probabilidade', 'estat√≠stica',
                  'm√©dia', 'moda', 'mediana', 'gr√°fico', 'tabela'],
        symbols: ['%'],
        regex: [
          /enem/i,
          /vestibular/i,
          /\d+%/,
          /juros/i,
          /desconto/i,
          /regra.*tr[√™e]s/i,
          /probabilidade/i,
          /estat√≠stica/i
        ],
        confidence: 0.6
      },
      
      'Para Revisar': {
        keywords: ['dif√≠cil', 'complexo', 'n√£o entendi', 'confuso', 'revisar', 'estudar mais'],
        symbols: [],
        regex: [
          /n[√£a]o.*entend/i,
          /dif√≠cil/i,
          /complexo/i,
          /confuso/i
        ],
        confidence: 0.4
      }
    };
    
    // Cache para otimizar an√°lises repetidas
    this.cache = new Map();
    this.maxCacheSize = 100;
  }

  /**
   * Categorizar problema matem√°tico
   */
  categorizeProblem(problemText) {
    try {
      // Verificar cache primeiro
      const cacheKey = this.generateCacheKey(problemText);
      if (this.cache.has(cacheKey)) {
        console.log(`üíæ Categoria recuperada do cache: "${truncateText(problemText)}"`);
        return this.cache.get(cacheKey);
      }

      const text = problemText.toLowerCase().trim();
      const scores = {};

      // Calcular pontua√ß√£o para cada categoria
      for (const [category, pattern] of Object.entries(this.patterns)) {
        scores[category] = this.calculateCategoryScore(text, pattern);
      }

      // Encontrar categoria com maior pontua√ß√£o
      const bestMatch = this.findBestMatch(scores);
      
      // Adicionar ao cache
      this.addToCache(cacheKey, bestMatch);
      
      console.log(`üîç Problema categorizado: "${truncateText(problemText)}" ‚Üí ${bestMatch.category} (${(bestMatch.confidence * 100).toFixed(1)}%)`);
      
      return bestMatch;
    } catch (error) {
      console.error('‚ùå Erro na categoriza√ß√£o:', error.message);
      return this.getDefaultCategory();
    }
  }

  /**
   * Calcular pontua√ß√£o de uma categoria para um texto
   */
  calculateCategoryScore(text, pattern) {
    let score = 0;
    let matches = 0;

    // Pontua√ß√£o por palavras-chave
    for (const keyword of pattern.keywords) {
      if (text.includes(keyword.toLowerCase())) {
        score += 1;
        matches++;
      }
    }

    // Pontua√ß√£o por s√≠mbolos
    for (const symbol of pattern.symbols) {
      if (text.includes(symbol)) {
        score += 0.5;
        matches++;
      }
    }

    // Pontua√ß√£o por regex (mais espec√≠fico)
    for (const regex of pattern.regex) {
      if (regex.test(text)) {
        score += 2;
        matches++;
      }
    }

    // Normalizar pontua√ß√£o baseada no n√∫mero de padr√µes
    const totalPatterns = pattern.keywords.length + pattern.symbols.length + pattern.regex.length;
    const normalizedScore = totalPatterns > 0 ? score / totalPatterns : 0;

    return {
      score: normalizedScore,
      matches,
      baseConfidence: pattern.confidence
    };
  }

  /**
   * Encontrar melhor categoria baseada nas pontua√ß√µes
   */
  findBestMatch(scores) {
    let bestCategory = null;
    let bestScore = 0;
    let bestConfidence = 0;

    for (const [category, result] of Object.entries(scores)) {
      const finalScore = result.score * result.baseConfidence;
      
      if (finalScore > bestScore) {
        bestScore = finalScore;
        bestCategory = category;
        bestConfidence = Math.min(finalScore, 0.95); // M√°ximo 95% de confian√ßa
      }
    }

    // Se nenhuma categoria teve pontua√ß√£o significativa, usar padr√£o
    if (bestScore < 0.1) {
      return this.getDefaultCategory();
    }

    return {
      category: bestCategory,
      confidence: bestConfidence,
      details: scores[bestCategory]
    };
  }

  /**
   * Categoria padr√£o quando n√£o consegue categorizar
   */
  getDefaultCategory() {
    return {
      category: '√Ålgebra B√°sica',
      confidence: 0.5,
      details: { score: 0, matches: 0, baseConfidence: 0.5 }
    };
  }

  /**
   * Gerar sugest√µes de tags baseadas no problema
   */
  generateTags(problemText, category) {
    const tags = [];
    const text = problemText.toLowerCase();

    // Tag da categoria
    tags.push(category.toLowerCase().replace(/\s+/g, '-'));

    // Tags espec√≠ficas baseadas no conte√∫do
    const tagPatterns = {
      'equa√ß√£o': /equa[√ßc][√£a]o/i,
      'sistema': /sistema/i,
      'fun√ß√£o': /fun[√ßc][√£a]o|f\(x\)/i,
      'geometria': /√°rea|per√≠metro|volume|c√≠rculo|tri√¢ngulo/i,
      'trigonometria': /(sen|cos|tan)\(/i,
      'logaritmo': /(log|ln)\(/i,
      'porcentagem': /%|\bpor\s*cento/i,
      'juros': /juros/i,
      'probabilidade': /probabilidade/i,
      'estat√≠stica': /estat√≠stica|m√©dia|moda|mediana/i
    };

    for (const [tag, pattern] of Object.entries(tagPatterns)) {
      if (pattern.test(text)) {
        tags.push(tag);
      }
    }

    // Limitar n√∫mero de tags
    return tags.slice(0, 5);
  }

  /**
   * Analisar dificuldade do problema
   */
  analyzeDifficulty(problemText) {
    const text = problemText.toLowerCase();
    let difficultyScore = 1;

    // Fatores que aumentam dificuldade
    const difficultyFactors = [
      { pattern: /\^[2-9]/, weight: 1 }, // Pot√™ncias
      { pattern: /(sen|cos|tan)\(/i, weight: 1.5 }, // Trigonometria
      { pattern: /(log|ln)\(/i, weight: 1.5 }, // Logaritmos
      { pattern: /‚àö/, weight: 0.5 }, // Ra√≠zes
      { pattern: /sistema/i, weight: 1 }, // Sistemas
      { pattern: /integral|derivada/i, weight: 2 }, // C√°lculo
      { pattern: /matriz/i, weight: 1.5 }, // √Ålgebra linear
      { pattern: /\d{3,}/, weight: 0.5 } // N√∫meros grandes
    ];

    for (const factor of difficultyFactors) {
      if (factor.pattern.test(text)) {
        difficultyScore += factor.weight;
      }
    }

    // Normalizar para escala 1-5
    const normalizedDifficulty = Math.min(Math.max(Math.round(difficultyScore), 1), 5);

    return {
      level: normalizedDifficulty,
      description: this.getDifficultyDescription(normalizedDifficulty)
    };
  }

  /**
   * Obter descri√ß√£o da dificuldade
   */
  getDifficultyDescription(level) {
    const descriptions = {
      1: 'B√°sico',
      2: 'F√°cil',
      3: 'M√©dio',
      4: 'Dif√≠cil',
      5: 'Avan√ßado'
    };
    
    return descriptions[level] || 'M√©dio';
  }

  /**
   * Sugerir cole√ß√£o baseada na categoria
   */
  suggestCollection(category, confidence) {
    // Se confian√ßa √© baixa, sugerir Favoritos
    if (confidence < 0.6) {
      return 'Favoritos';
    }

    // Mapeamento direto categoria ‚Üí cole√ß√£o
    const categoryMapping = {
      '√Ålgebra B√°sica': '√Ålgebra B√°sica',
      'Geometria': 'Geometria',
      'Fun√ß√µes': 'Fun√ß√µes',
      'Prepara√ß√£o ENEM': 'Prepara√ß√£o ENEM',
      'Para Revisar': 'Para Revisar'
    };

    return categoryMapping[category] || 'Favoritos';
  }

  /**
   * Gerenciamento de cache
   */
  generateCacheKey(text) {
    // Hash simples baseado no texto
    let hash = 0;
    for (let i = 0; i < text.length; i++) {
      const char = text.charCodeAt(i);
      hash = ((hash << 5) - hash) + char;
      hash = hash & hash; // Converter para 32bit
    }
    return hash.toString();
  }

  addToCache(key, value) {
    // Limpar cache se estiver muito grande
    if (this.cache.size >= this.maxCacheSize) {
      const firstKey = this.cache.keys().next().value;
      this.cache.delete(firstKey);
    }
    
    this.cache.set(key, value);
  }

  /**
   * Limpar cache
   */
  clearCache() {
    this.cache.clear();
    console.log('üßπ Cache de categoriza√ß√£o limpo');
  }

  /**
   * Estat√≠sticas do cache
   */
  getCacheStats() {
    return {
      size: this.cache.size,
      maxSize: this.maxCacheSize,
      hitRate: this.cacheHits / (this.cacheHits + this.cacheMisses) || 0
    };
  }

  /**
   * An√°lise completa do problema
   */
  analyzeComplete(problemText) {
    const category = this.categorizeProblem(problemText);
    const difficulty = this.analyzeDifficulty(problemText);
    const tags = this.generateTags(problemText, category.category);
    const suggestedCollection = this.suggestCollection(category.category, category.confidence);

    return {
      category: category.category,
      confidence: category.confidence,
      difficulty: difficulty.level,
      difficultyDescription: difficulty.description,
      tags,
      suggestedCollection,
      analysis: {
        categoryDetails: category.details,
        difficultyFactors: difficulty
      }
    };
  }
}

// Inst√¢ncia singleton
const categorizationService = new CategorizationService();

module.exports = categorizationService;