// ExplicaAI - Servi√ßo de Integra√ß√£o com Ollama/Gemma 3n
// Centraliza toda comunica√ß√£o com o modelo de IA

const fs = require('fs');
const path = require('path');
const { getElapsedTime, truncateText } = require('../utils/helpers');

class OllamaService {
  constructor() {
    this.baseUrl = 'http://localhost:11434';
    this.model = 'gemma3n:e4b';
    this.defaultOptions = {
      temperature: 0.3, // Mais determin√≠stico para matem√°tica
      top_p: 0.9,
      top_k: 40
    };
  }

  /**
   * Verificar se o Ollama est√° rodando
   */
  async checkStatus() {
    try {
      const fetch = (await import('node-fetch')).default;
      const response = await fetch(this.baseUrl, { timeout: 5000 });
      const text = await response.text();
      return text.includes('Ollama is running');
    } catch (error) {
      return false;
    }
  }

  /**
   * Chamar Ollama com prompt (com ou sem imagem)
   */
  async generate(prompt, imagePath = null, options = {}, abortSignal = null) {
  const fetch = (await import('node-fetch')).default;
  
  const requestBody = {
    model: this.model,
    prompt: prompt,
    stream: false,
    options: { ...this.defaultOptions, ...options }
  };

  // Adicionar imagem se fornecida
  if (imagePath && fs.existsSync(imagePath)) {
    try {
      const imageBuffer = fs.readFileSync(imagePath);
      const base64Image = imageBuffer.toString('base64');
      requestBody.images = [base64Image];
      console.log(`üì∑ Imagem adicionada: ${path.basename(imagePath)}`);
    } catch (error) {
      console.error('‚ùå Erro ao processar imagem:', error.message);
      throw new Error('Erro ao processar a imagem');
    }
  }

  try {
    console.log('ü§ñ Enviando para Gemma 3n...');
    const startTime = Date.now();
    
    // ‚úÖ ADICIONAR SUPORTE A CANCELAMENTO
    const fetchOptions = {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(requestBody),
      timeout: 120000
    };

    // ‚úÖ ADICIONAR AbortSignal se fornecido
    if (abortSignal) {
      fetchOptions.signal = abortSignal;
    }
    
    const response = await fetch(`${this.baseUrl}/api/generate`, fetchOptions);

    if (!response.ok) {
      throw new Error(`Ollama respondeu com status ${response.status}`);
    }

    const data = await response.json();
    const elapsedTime = getElapsedTime(startTime);
    
    console.log(`‚úÖ Resposta recebida em ${elapsedTime}s`);
    
    if (!data.response) {
      throw new Error('Resposta vazia do modelo');
    }
    
    return {
      response: data.response,
      elapsedTime,
      model: this.model
    };
  } catch (error) {
    // ‚úÖ TRATAR CANCELAMENTO
    if (error.name === 'AbortError') {
      console.log('üõë Requisi√ß√£o cancelada pelo usu√°rio');
      throw new Error('Opera√ß√£o cancelada');
    }
    
    console.error('‚ùå Erro ao chamar Ollama:', error.message);
    
    if (error.name === 'TimeoutError' || error.message.includes('timeout')) {
      throw new Error('Timeout - o modelo est√° demorando muito para responder. Tente reiniciar o Ollama.');
    }
    
    throw new Error(`Erro na comunica√ß√£o com IA: ${error.message}`);
  }
}

  /**
   * Analisar imagem com problema matem√°tico
   */
  async analyzeImage(imagePath) {
    const prompt = this.createImagePrompt();
    const result = await this.generate(prompt, imagePath);
    
    console.log(`üì∑ Imagem analisada: ${path.basename(imagePath)} em ${result.elapsedTime}s`);
    
    return result;
  }

  /**
   * Teste simples de conectividade
   */
  async test() {
    try {
      const result = await this.generate('Resolva: 2 + 2 = ?');
      return {
        status: 'success',
        response: result.response,
        elapsedTime: result.elapsedTime
      };
    } catch (error) {
      return {
        status: 'error',
        error: error.message
      };
    }
  }

  /**
   * Criar prompt para explica√ß√£o matem√°tica
   */
  createMathPrompt(problem) {
    const complexity = this.detectComplexity(problem);
    
    if (complexity === 'simple') {
      return `Voc√™ √© um professor de matem√°tica pr√°tico. Resolva este problema SIMPLES de forma DIRETA:

  PROBLEMA: "${problem}"

  INSTRU√á√ïES:
  - Este √© um problema SIMPLES, resolva em 1-3 passos diretos
  - N√ÉO complique com decomposi√ß√µes desnecess√°rias
  - Seja objetivo e pr√°tico

  FORMATO:
  PASSO 1: [Opera√ß√£o direta]
  Explica√ß√£o: [Breve explica√ß√£o do que fazer]
  C√°lculo: [Opera√ß√£o matem√°tica]
  Resultado: [Resultado direto]

  VERIFICA√á√ÉO:
  Explica√ß√£o: [Conferir se est√° correto]
  C√°lculo: [Verifica√ß√£o r√°pida]
  Resultado: [Confirma√ß√£o]

  RESPOSTA FINAL: [Resultado destacado]

  IMPORTANTE: Mantenha SIMPLES e DIRETO!`;
    }
    
    if (complexity === 'complex') {
      return `Voc√™ √© um professor de matem√°tica especializado. Resolva este problema COMPLEXO passo a passo:

  PROBLEMA: "${problem}"

  INSTRU√á√ïES:
  - Este √© um problema COMPLEXO, pode usar 5-10 passos
  - Explique conceitos importantes
  - Seja did√°tico e detalhado

  FORMATO:
  PASSO 1: [T√≠tulo claro do primeiro passo]
  Explica√ß√£o: [Explique o conceito e por qu√™]
  C√°lculo: [Opera√ß√£o matem√°tica detalhada]
  Resultado: [Resultado deste passo]

  [Continue com PASSO 2, PASSO 3, etc conforme necess√°rio]

  VERIFICA√á√ÉO:
  Explica√ß√£o: [Substitua o resultado na equa√ß√£o original]
  C√°lculo: [Mostre a verifica√ß√£o completa]
  Resultado: [Confirma√ß√£o se est√° correto]

  RESPOSTA FINAL: [Destaque a resposta de forma clara]

  IMPORTANTE: Use EXATAMENTE os r√≥tulos "PASSO X:", "Explica√ß√£o:", "C√°lculo:", "Resultado:"`;
    }
    
    // Problemas m√©dios (padr√£o atual melhorado)
    return `Voc√™ √© um professor de matem√°tica did√°tico. Resolva este problema seguindo o formato:

  PROBLEMA: "${problem}"

  INSTRU√á√ïES:
  - Use 3-6 passos conforme necess√°rio
  - Seja claro e educativo
  - Mantenha consist√™ncia no formato

  FORMATO:
  PASSO 1: [T√≠tulo claro do primeiro passo]
  Explica√ß√£o: [Explique o que fazer e por qu√™]
  C√°lculo: [Mostre a opera√ß√£o matem√°tica]
  Resultado: [Resultado deste passo]

  PASSO 2: [T√≠tulo claro do segundo passo]
  Explica√ß√£o: [Explique o que fazer e por qu√™]
  C√°lculo: [Mostre a opera√ß√£o matem√°tica]
  Resultado: [Resultado deste passo]

  [Continue conforme necess√°rio]

  VERIFICA√á√ÉO:
  Explica√ß√£o: [Substitua o resultado na equa√ß√£o original para confirmar]
  C√°lculo: [Mostre a verifica√ß√£o]
  Resultado: [Confirma√ß√£o se est√° correto]

  RESPOSTA FINAL: [Destaque a resposta de forma clara]

  IMPORTANTE: Use EXATAMENTE os r√≥tulos "PASSO X:", "Explica√ß√£o:", "C√°lculo:", "Resultado:"`;
  }

  /**
   * ‚úÖ ADICIONAR: Fun√ß√£o que estava faltando
   */
  async explainMathAnswerOnly(problem) {
    const prompt = `Resolva este problema de matem√°tica e me d√™ APENAS a resposta final, sem explica√ß√µes:

  ${problem}

  RESPOSTA:`;
    
    const result = await this.generate(prompt, null, {
      temperature: 0.1, // Mais determin√≠stico para respostas diretas
      top_p: 0.8
    });
    
    console.log(`‚ö° Resposta r√°pida: "${this.truncateText ? this.truncateText(problem) : problem.substring(0, 50)}..." em ${result.elapsedTime}s`);
    
    return result;
  }


  /**
   * Criar prompt para an√°lise de imagens
   */
  createImagePrompt() {
    return `Voc√™ √© um professor de matem√°tica analisando uma imagem com um exerc√≠cio matem√°tico.

IMPORTANTE: Analise cuidadosamente cada s√≠mbolo na imagem.

TAREFA:
1. Transcreva EXATAMENTE o que est√° escrito na imagem
2. Se n√£o conseguir ler algo, mencione a dificuldade
3. Resolva o problema identificado passo a passo

FORMATO DA RESPOSTA:
**Transcri√ß√£o da imagem:**
[O que conseguiu ler exatamente]

**An√°lise do Problema:**
[Tipo de problema e o que est√° sendo pedido]

**Solu√ß√£o Passo a Passo:**
1. [Primeiro passo]
2. [Segundo passo]
3. [Continue at√© resolver]

**Resposta Final:**
[Resultado destacado]

Use linguagem clara e did√°tica para estudantes.`;
  }

  /**
   * Obter informa√ß√µes do modelo
   */
  async getModelInfo() {
    try {
      const fetch = (await import('node-fetch')).default;
      const response = await fetch(`${this.baseUrl}/api/show`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ name: this.model }),
        timeout: 10000
      });

      if (!response.ok) {
        throw new Error(`Erro ao obter informa√ß√µes do modelo: ${response.status}`);
      }

      const data = await response.json();
      return data;
    } catch (error) {
      console.error('‚ùå Erro ao obter informa√ß√µes do modelo:', error.message);
      throw error;
    }
  }

  /**
   * Listar modelos dispon√≠veis
   */
  async listModels() {
    try {
      const fetch = (await import('node-fetch')).default;
      const response = await fetch(`${this.baseUrl}/api/tags`, {
        timeout: 10000
      });

      if (!response.ok) {
        throw new Error(`Erro ao listar modelos: ${response.status}`);
      }

      const data = await response.json();
      return data.models || [];
    } catch (error) {
      console.error('‚ùå Erro ao listar modelos:', error.message);
      throw error;
    }
  }

  /**
   * Explicar problema matem√°tico - VERS√ÉO DETALHADA
   */
  async explainMath(problem, abortSignal = null) {
    const prompt = this.createMathPrompt(problem);
    const result = await this.generate(prompt, null, {}, abortSignal);
    
    console.log(`üìù Problema estruturado: "${this.truncateText ? this.truncateText(problem) : problem.substring(0, 50)}..." em ${result.elapsedTime}s`);
    
    return result;
  }
 

  /**
   * Gerar exerc√≠cios similares
   */
  async generateSimilar(originalProblem) {
    const prompt = this.createSimilarPrompt(originalProblem);
    const result = await this.generate(prompt);
    
    console.log(`üéØ Exerc√≠cios similares gerados para: "${truncateText(originalProblem)}" em ${result.elapsedTime}s`);
    
    return result;
  }

  /**
   * Analisar imagem de exerc√≠cio
   */
  async analyzeImage(image) {
    const prompt = this.createImagePrompt();
    const result = await this.generate(prompt, image);
    
    console.log(`üì∑ Imagem analisada em ${result.elapsedTime}s`);
    
    return result;
  }

  /**
   * TESTE: Fun√ß√£o para debug - retorna Ol√° Mundo
   */
  async soResposta(problem, abortSignal = null) {
    console.log('üö® SOLU√á√ÉO DRAM√ÅTICA: Passo a passo interno!');
    
    const fullResult = await this.explainMath(problem);
    
    const extractFinalAnswer = (fullText) => {
        const finalMatch = fullText.match(/RESPOSTA FINAL:\s*(.+?)(?:\n|$)/i);
        if (finalMatch) {
            return finalMatch[1].trim();
        }
        
        const xMatch = fullText.match(/x\s*=\s*[^\n]+/gi);
        if (xMatch && xMatch.length > 0) {
            return xMatch[xMatch.length - 1].trim().replace(/[\[\]]/g, ''); 
        }
        
        return "N√£o foi poss√≠vel extrair a resposta";
    };
    
    return {
        response: extractFinalAnswer(fullResult.response),
        elapsedTime: fullResult.elapsedTime,
        model: this.model
    };
  }

  /**
 * Criar prompt para gerar exerc√≠cios similares
 */
  createSimilarPrompt(originalProblem) {
    return `Voc√™ √© um professor de matem√°tica criativo. Baseado neste problema original, crie 3 exerc√≠cios similares:

  PROBLEMA ORIGINAL: "${originalProblem}"

  INSTRU√á√ïES:
  1. Crie 3 exerc√≠cios com a mesma estrutura/conceito
  2. Mude apenas os n√∫meros e contexto
  3. Mantenha o mesmo n√≠vel de dificuldade
  4. Use contextos diferentes (idade, dinheiro, objetos, etc.)

  FORMATO DA RESPOSTA:
  **Exerc√≠cio 1:**
  [Novo problema similar]

  **Exerc√≠cio 2:** 
  [Novo problema similar]

  **Exerc√≠cio 3:**
  [Novo problema similar]

  **Dica de Estudo:**
  [Uma dica pedag√≥gica sobre este tipo de problema]

  EXERC√çCIOS SIMILARES:`;
  }

  /**
   * Detectar complexidade do problema matem√°tico
   */
  detectComplexity(problem) {
    const text = problem.toLowerCase().trim();
    
    // Problemas SIMPLES (1-2 passos diretos)
    const simplePatterns = [
      /^\d+\s*[+\-*/]\s*\d+$/, // 36*6, 25+17
      /^\d+\s*[+\-*/]\s*\d+\s*[+\-*/]\s*\d+$/, // 2+3*4
      /^x\s*[+\-]\s*\d+\s*=\s*\d+$/, // x+5=13
      /^\d*x\s*=\s*\d+$/, // 2x=10
    ];
    
    // Problemas COMPLEXOS
    const complexPatterns = [
      /sistema|equa√ß√£o.*equa√ß√£o/i,
      /integral|derivada|limite/i,
      /sen\(|cos\(|tan\(|log\(|ln\(/i,
      /sqrt|raiz|‚àö/i,
      /matriz|determinante/i
    ];
    
    // Verificar se √© simples
    if (simplePatterns.some(pattern => pattern.test(text))) {
      return 'simple';
    }
    
    // Verificar se √© complexo
    if (complexPatterns.some(pattern => pattern.test(text))) {
      return 'complex';
    }
    
    // Padr√£o: m√©dio
    return 'medium';
  }

}



// Inst√¢ncia singleton
const ollamaService = new OllamaService();

module.exports = ollamaService;